# .github/workflows/js-quality-gates.yml
# This workflow is a comprehensive quality and security gate for the Vision UI JavaScript project.
# It is hardened for security and reproducibility by pinning all GitHub Actions to specific commit SHAs.
#
# It runs static analysis, formatting checks, type checking, and security scans in parallel,
# then aggregates their results into SonarQube for unified reporting and quality gating.
#
# Tools included:
# - ESLint: Using the project's advanced flat config for security and style.
# - Prettier: Ensures consistent code formatting.
# - TypeScript Compiler (tsc): Performs strict type-checking based on JSDoc annotations and tsconfig.json.
# - CodeQL: GitHub's deep semantic code analysis for finding security vulnerabilities.
# - Vitest: Runs unit tests and generates code coverage reports.
#
# This workflow runs manually, on every new release, and weekly on Sunday.

name: 🛡️ JS Quality & Security Gates

on:
  # 1. Manual Trigger: Allows running the workflow on demand from the Actions UI.
  workflow_dispatch:

  # 2. Release Trigger: Automatically runs when a new release is published.
  release:
    types: [published]

  # 3. Scheduled Trigger: Runs weekly as a routine health check of the main branch.
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 02:00 UTC

permissions:
  pull-requests: read
  security-events: write
  contents: read
  issues: write
  checks: write

jobs:
  # This job provides a quick, preliminary check to ensure all configuration files are valid.
  # It fails fast if a simple syntax error is found in a config file.
  Validate-Configs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # Pinned to commit SHA for v4.1.7 for security and reproducibility.
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709

      - name: Set up Node.js for validation
        # Pinned to commit SHA for v4.0.3 for security and reproducibility.
        uses: actions/setup-node@5e2628c959b9ade56971c0afcebbe5332d44b398
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies for validation
        run: npm ci

      - name: Validate configuration files
        run: |
          # Use node --check for JavaScript config files to verify syntax.
          echo "Validating eslint.config.js syntax..."
          node --check eslint.config.js

          # Use the TypeScript compiler itself to validate tsconfig.json. This is more robust than jq.
          echo "Validating tsconfig.json..."
          npx tsc --showConfig -p tsconfig.json > /dev/null

          # Use jq for package.json as it is a standard, strict JSON file.
          echo "Validating package.json..."
          jq -e . package.json > /dev/null

          echo "✅ All configuration files are well-formed."

  # *** NEW JOB ADDED ***
  # This job runs tests and generates a coverage report.
  Test-and-Coverage:
    needs: [Validate-Configs]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709

      - name: Set up Node.js
        uses: actions/setup-node@5e2628c959b9ade56971c0afcebbe5332d44b398
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests and generate coverage report
        # Your 'test:coverage' script from package.json will be executed here.
        run: npm run test:coverage

      - name: Upload coverage report
        # Pinned to commit SHA for v4.3.4 for security and reproducibility.
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: coverage-report
          path: coverage/lcov.info
          retention-days: 1

  Analyze:
    needs: [Validate-Configs]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tool: [eslint, prettier, tsc, codeql, snyk]
    steps:
      - name: Checkout code
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709

      - name: Set up Node.js
        if: matrix.tool != 'codeql'
        uses: actions/setup-node@5e2628c959b9ade56971c0afcebbe5332d44b398
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        if: matrix.tool != 'codeql'
        run: npm ci

      - name: Run ESLint
        if: matrix.tool == 'eslint'
        run: npx eslint . --format json --output-file eslint-report.json || true

      - name: Run Prettier Check
        if: matrix.tool == 'prettier'
        run: npm run format:check || true

      - name: Run TypeScript Type-Checker
        if: matrix.tool == 'tsc'
        run: npx tsc --noEmit -p tsconfig.json

      - name: Initialize CodeQL
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/init@233052189b8c862bfaf875fb02c115f54d2b9286
        with:
          languages: javascript-typescript

      # --- MODIFICATION 1: Control the output directory ---
      - name: Perform CodeQL Analysis
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/analyze@233052189b8c862bfaf875fb02c115f54d2b9286
        with:
          category: "/language:javascript"
          # This line tells CodeQL where to save the SARIF file.
          output: codeql-results

            # *** CHANGE 2: Add steps to set up and run Snyk ***
      - name: Setup Snyk CLI
        if: matrix.tool == 'snyk'
        # Pinned to a specific commit for security and reproducibility
        uses: snyk/actions/setup@77490d94e966421e076e95ad8fa87aa55e5ca409

      - name: Run Snyk Open Source Scan
        if: matrix.tool == 'snyk'
        # Allow the workflow to continue even if vulnerabilities are found.
        # SonarCloud will be the quality gate.
        run: snyk test --sarif-file-output=snyk.sarif || true
        env:
          # Use the token from GitHub secrets
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # --- MODIFICATION 2: Update the path for the artifact ---
      - name: Upload report artifact
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: ${{ matrix.tool }}-report
          # The path now points to the new, valid location inside the workspace.
          path: |
            eslint-report.json
            codeql-results/*.sarif
          retention-days: 1

  SonarQube:
    # *** MODIFIED `needs` SECTION ***
    # This job now depends on both Analyze and Test-and-Coverage.
    needs: [Analyze, Test-and-Coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # Pinned to commit SHA for v4.1.7 for security and reproducibility.
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          # Sonar needs full history for accurate blame information and new code detection.
          fetch-depth: 0

      - name: Download all analysis reports
        # Pinned to commit SHA for v4.1.8 for security and reproducibility.
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          # Downloads all artifacts from the 'Analyze' and 'Test-and-Coverage' jobs
          # into the 'reports' directory.
          path: reports

      - name: Prepare SonarQube arguments
        id: prep_sonar
        run: |
          echo "Processing downloaded reports..."
          SONAR_ARGS=""

          # --- Process ESLint Report ---
          if [ -f "reports/eslint-report/eslint-report.json" ]; then
            echo "✅ Found ESLint report."
            SONAR_ARGS="$SONAR_ARGS -Dsonar.eslint.reportPaths=reports/eslint-report/eslint-report.json"
          else
            echo "⚠️ ESLint report not found."
          fi

          # --- Process SARIF Reports ---
          CODEQL_REPORT=$(find reports/codeql-report -name "*.sarif" -print -quit)
          if [ -n "$CODEQL_REPORT" ]; then
            echo "✅ Found CodeQL SARIF report at $CODEQL_REPORT."
            SONAR_ARGS="$SONAR_ARGS -Dsonar.sarif.reportPaths=$CODEQL_REPORT"
          else
            echo "⚠️ CodeQL report not found."
          fi
          
          # *** NEW SECTION ADDED FOR COVERAGE ***
          # --- Process Coverage Report ---
          COVERAGE_REPORT="reports/coverage-report/lcov.info"
          if [ -f "$COVERAGE_REPORT" ]; then
            echo "✅ Found LCOV coverage report."
            # The property sonar.javascript.lcov.reportPaths tells SonarQube where to find the coverage file.
            SONAR_ARGS="$SONAR_ARGS -Dsonar.javascript.lcov.reportPaths=${COVERAGE_REPORT}"
          else
            echo "⚠️ LCOV coverage report not found."
          fi

          # --- Add TypeScript Configuration ---
          if [ -f "tsconfig.json" ]; then
            echo "✅ Found tsconfig.json for SonarQube analysis."
            SONAR_ARGS="$SONAR_ARGS -Dsonar.typescript.tsconfigPath=tsconfig.json"
          fi

          echo "SONAR_EXTRA_ARGS=${SONAR_ARGS}" >> $GITHUB_ENV
          echo "✨ Final SonarQube arguments: ${SONAR_ARGS}"

      - name: Analyze with SonarQube
        # Pinned to commit SHA for v2.0.0 for security and reproducibility.
        uses: SonarSource/sonarqube-scan-action@01850e2590cc09ed26831056406ae1525aa41ad5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=DavidOsipov_Vision-ui
            -Dsonar.organization=davidosipov
            -Dsonar.sources=src/
            -Dsonar.tests=tests/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.verbose=false
            ${{ env.SONAR_EXTRA_ARGS }}